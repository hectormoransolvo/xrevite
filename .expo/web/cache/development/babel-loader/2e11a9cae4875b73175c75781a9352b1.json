{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { COL_TYPES } from \"./DataTable\";\nimport Line from \"./Line\";\nimport CheckBox from \"./CheckBox\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar DataTableRow = React.memo(function (props) {\n  var data = props.data,\n      colNames = props.colNames,\n      style = props.style,\n      mapColNameToType = props.mapColNameToType,\n      widthOfLine = props.widthOfLine,\n      handleOnRowSelect = props.handleOnRowSelect;\n  var color = 'black';\n  var backgroundColor = 'transparent';\n\n  if (data.doHighlight && data.doHighlight != 'default') {\n    var _data$doHighlight, _data$doHighlight2;\n\n    color = typeof data.doHighlight != 'string' && ((_data$doHighlight = data.doHighlight) == null ? void 0 : _data$doHighlight.textColor);\n    backgroundColor = typeof data.doHighlight == 'string' ? data.doHighlight : (_data$doHighlight2 = data.doHighlight) == null ? void 0 : _data$doHighlight2.backgroundColor;\n  } else if (data.doHighlight && data.doHighlight === 'default') {\n    color = 'white';\n    backgroundColor = '#990099';\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: [styles.rowContainer, {\n        backgroundColor: backgroundColor\n      }],\n      children: colNames.map(function (name, index) {\n        var colType = mapColNameToType[name];\n        var textAlign = colType == COL_TYPES.STRING || colType == null ? 'left' : colType == COL_TYPES.CHECK_BOX || colType == COL_TYPES.RADIO ? 'center' : 'right';\n        var paddingLeft = 0;\n        var paddingRight = 0;\n\n        if (textAlign == 'left') {\n          paddingRight = 1;\n          paddingLeft = 13;\n        } else if (textAlign == 'right') {\n          paddingRight = 13;\n          paddingLeft = 1;\n        }\n\n        return _jsx(View, {\n          style: [styles.rowCellContainer, {\n            width: style.defaultEachColumnWidth\n          }],\n          children: textAlign == 'center' ? _jsx(View, {\n            style: {\n              width: '100%',\n              height: 20,\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: _jsx(CheckBox, {\n              info: {\n                name: name,\n                id: data.id\n              },\n              handleOnRowSelect: handleOnRowSelect,\n              initialVal: data[name] == true ? true : false\n            })\n          }) : _jsx(Text, {\n            style: [styles.rowCellText, {\n              paddingLeft: paddingLeft,\n              paddingRight: paddingRight,\n              textAlign: textAlign,\n              color: color\n            }],\n            children: data[name]\n          })\n        }, index);\n      })\n    }), _jsx(Line, {\n      row: true,\n      width: widthOfLine\n    })]\n  });\n});\nexport default DataTableRow;\nvar styles = StyleSheet.create({\n  rowContainer: {\n    flexDirection: 'row',\n    backgroundColor: 'green',\n    paddingHorizontal: 10\n  },\n  rowCellText: {\n    color: 'black',\n    fontSize: 14.5\n  },\n  rowCellContainer: {\n    paddingTop: 10,\n    paddingBottom: 10\n  }\n});","map":{"version":3,"sources":["D:/react-native/xrevi/node_modules/react-native-datatable-component/src/DataTableRow.js"],"names":["React","COL_TYPES","Line","CheckBox","Dimensions","get","width","height","DataTableRow","memo","props","data","colNames","style","mapColNameToType","widthOfLine","handleOnRowSelect","color","backgroundColor","doHighlight","textColor","styles","rowContainer","map","name","index","colType","textAlign","STRING","CHECK_BOX","RADIO","paddingLeft","paddingRight","rowCellContainer","defaultEachColumnWidth","alignItems","justifyContent","id","rowCellText","StyleSheet","create","flexDirection","paddingHorizontal","fontSize","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, Dimensions } from 'react-native';\nimport { COL_TYPES } from './DataTable';\nimport Line from './Line';\nimport CheckBox from './CheckBox';\nconst { width, height } = Dimensions.get('window');\n\nconst DataTableRow = React.memo((props) => {\n\n    //data is object\n    const { data, colNames, style, mapColNameToType, widthOfLine, handleOnRowSelect } = props;\n\n    let color = 'black';\n    let backgroundColor = 'transparent';\n    if (data.doHighlight && data.doHighlight != 'default') {\n        color = typeof (data.doHighlight) != 'string' && (data.doHighlight?.textColor); //textColor\n        backgroundColor = typeof (data.doHighlight) == 'string' ? data.doHighlight : data.doHighlight?.backgroundColor;\n    } else if (data.doHighlight && data.doHighlight === 'default') {\n        color = 'white';\n        backgroundColor = '#990099';\n    }\n    return (\n        <>\n\n            <View style={[styles.rowContainer, { backgroundColor }]}>\n                {\n                    colNames.map((name, index) => {\n                        const colType = mapColNameToType[name]\n                        const textAlign = (colType == COL_TYPES.STRING || colType == null) ? 'left' : (colType == COL_TYPES.CHECK_BOX || colType == COL_TYPES.RADIO) ? 'center' : 'right'\n                        let paddingLeft = 0;\n                        let paddingRight = 0;\n                        if (textAlign == 'left') {\n                            paddingRight = 1;\n                            paddingLeft = 13\n                        } else if (textAlign == 'right') {\n                            paddingRight = 13;\n                            paddingLeft = 1;\n\n                        }\n\n                        // const handleOnCheckPress = (isChecked) => {\n                            // handleOnRowSelect(isChecked, data.id, name)\n                        // }\n                        // console.log(data[name])\n                        return (\n                            <View key={index} style={[styles.rowCellContainer, { width: style.defaultEachColumnWidth }]}>\n                                {\n                                    textAlign == 'center' ? (\n                                        <View style={{width: '100%', height: 20, alignItems: 'center', justifyContent: 'center'}}>\n                                            <CheckBox info={{name, id: data.id}} handleOnRowSelect={handleOnRowSelect} initialVal={data[name] == true ? true: false}/> \n                                        </View>\n                                    ): (\n                                        <Text style={[styles.rowCellText, { paddingLeft, paddingRight, textAlign, color }]}>{data[name]}</Text>\n                                    )\n                                }\n                            </View>\n                            \n                        );\n                    })\n                }\n            </View>\n\n            <Line row width={widthOfLine} />\n\n        </>\n    );\n})\n\nexport default DataTableRow;\n\nconst styles = StyleSheet.create({\n    rowContainer: {\n        flexDirection: 'row',\n        backgroundColor: 'green',\n        paddingHorizontal: 10\n    },\n    rowCellText: {\n        color: 'black',\n        fontSize: 14.5\n    },\n    rowCellContainer: {\n        paddingTop: 10,\n        paddingBottom: 10,\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}