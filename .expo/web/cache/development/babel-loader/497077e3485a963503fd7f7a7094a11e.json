{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Input from \"./Input\";\nimport Button from \"../UI/Button\";\nimport { getFormattedDate } from \"../../util/date\";\nimport { GlobalStyles } from \"../../constants/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ExpenseForm(_ref) {\n  var submitButtonLabel = _ref.submitButtonLabel,\n      onCancel = _ref.onCancel,\n      onSubmit = _ref.onSubmit,\n      defaultValues = _ref.defaultValues;\n\n  var _useState = useState({\n    amount: {\n      value: defaultValues ? defaultValues.amount.toString() : '',\n      isValid: true\n    },\n    date: {\n      value: defaultValues ? getFormattedDate(defaultValues.date) : '',\n      isValid: true\n    },\n    description: {\n      value: defaultValues ? defaultValues.description : '',\n      isValid: true\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  function inputChangedHandler(inputIdentifier, enteredValue) {\n    setInputs(function (curInputs) {\n      return _objectSpread(_objectSpread({}, curInputs), {}, _defineProperty({}, inputIdentifier, {\n        value: enteredValue,\n        isValid: true\n      }));\n    });\n  }\n\n  function submitHandler() {\n    var expenseData = {\n      amount: +inputs.amount.value,\n      date: new Date(inputs.date.value),\n      description: inputs.description.value\n    };\n    var amountIsValid = !isNaN(expenseData.amount) && expenseData.amount > 0;\n    var dateIsValid = expenseData.date.toString() !== 'Invalid Date';\n    var descriptionIsValid = expenseData.description.trim().length > 0;\n\n    if (!amountIsValid || !dateIsValid || !descriptionIsValid) {\n      setInputs(function (curInputs) {\n        return {\n          amount: {\n            value: curInputs.amount.value,\n            isValid: amountIsValid\n          },\n          date: {\n            value: curInputs.date.value,\n            isValid: dateIsValid\n          },\n          description: {\n            value: curInputs.description.value,\n            isValid: descriptionIsValid\n          }\n        };\n      });\n      return;\n    }\n\n    onSubmit(expenseData);\n  }\n\n  var formIsInvalid = !inputs.amount.isValid || !inputs.date.isValid || !inputs.description.isValid;\n  return _jsxs(View, {\n    style: styles.form,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Your Expense\"\n    }), _jsxs(View, {\n      style: styles.inputsRow,\n      children: [_jsx(Input, {\n        style: styles.rowInput,\n        label: \"Amount\",\n        invalid: !inputs.amount.isValid,\n        textInputConfig: {\n          keyboardType: 'decimal-pad',\n          onChangeText: inputChangedHandler.bind(this, 'amount'),\n          value: inputs.amount.value\n        }\n      }), _jsx(Input, {\n        style: styles.rowInput,\n        label: \"Date\",\n        invalid: !inputs.date.isValid,\n        textInputConfig: {\n          placeholder: 'YYYY-MM-DD',\n          maxLength: 10,\n          onChangeText: inputChangedHandler.bind(this, 'date'),\n          value: inputs.date.value\n        }\n      })]\n    }), _jsx(Input, {\n      label: \"Description\",\n      invalid: !inputs.description.isValid,\n      textInputConfig: {\n        multiline: true,\n        onChangeText: inputChangedHandler.bind(this, 'description'),\n        value: inputs.description.value\n      }\n    }), formIsInvalid && _jsx(Text, {\n      style: styles.errorText,\n      children: \"Invalid input values - please check your entered data!\"\n    }), _jsxs(View, {\n      style: styles.buttons,\n      children: [_jsx(Button, {\n        style: styles.button,\n        mode: \"flat\",\n        onPress: onCancel,\n        children: \"Cancel\"\n      }), _jsx(Button, {\n        style: styles.button,\n        onPress: submitHandler,\n        children: submitButtonLabel\n      })]\n    })]\n  });\n}\n\nexport default ExpenseForm;\nvar styles = StyleSheet.create({\n  form: {\n    marginTop: 40\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n    marginVertical: 24,\n    textAlign: 'center'\n  },\n  inputsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  rowInput: {\n    flex: 1\n  },\n  errorText: {\n    textAlign: 'center',\n    color: GlobalStyles.colors.error500,\n    margin: 8\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    minWidth: 120,\n    marginHorizontal: 8\n  }\n});","map":{"version":3,"sources":["D:/react-native/xrevi/components/ManageExpense/ExpenseForm.js"],"names":["useState","Input","Button","getFormattedDate","GlobalStyles","ExpenseForm","submitButtonLabel","onCancel","onSubmit","defaultValues","amount","value","toString","isValid","date","description","inputs","setInputs","inputChangedHandler","inputIdentifier","enteredValue","curInputs","submitHandler","expenseData","Date","amountIsValid","isNaN","dateIsValid","descriptionIsValid","trim","length","formIsInvalid","styles","form","title","inputsRow","rowInput","keyboardType","onChangeText","bind","placeholder","maxLength","multiline","errorText","buttons","button","StyleSheet","create","marginTop","fontSize","fontWeight","color","marginVertical","textAlign","flexDirection","justifyContent","flex","colors","error500","margin","alignItems","minWidth","marginHorizontal"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport Input from './Input';\nimport Button from '../UI/Button';\nimport { getFormattedDate } from '../../util/date';\nimport { GlobalStyles } from '../../constants/styles';\n\nfunction ExpenseForm({ submitButtonLabel, onCancel, onSubmit, defaultValues }) {\n  const [inputs, setInputs] = useState({\n    amount: {\n      value: defaultValues ? defaultValues.amount.toString() : '',\n      isValid: true,\n    },\n    date: {\n      value: defaultValues ? getFormattedDate(defaultValues.date) : '',\n      isValid: true,\n    },\n    description: {\n      value: defaultValues ? defaultValues.description : '',\n      isValid: true,\n    },\n  });\n\n  function inputChangedHandler(inputIdentifier, enteredValue) {\n    setInputs((curInputs) => {\n      return {\n        ...curInputs,\n        [inputIdentifier]: { value: enteredValue, isValid: true },\n      };\n    });\n  }\n\n  function submitHandler() {\n    const expenseData = {\n      amount: +inputs.amount.value,\n      date: new Date(inputs.date.value),\n      description: inputs.description.value,\n    };\n\n    const amountIsValid = !isNaN(expenseData.amount) && expenseData.amount > 0;\n    const dateIsValid = expenseData.date.toString() !== 'Invalid Date';\n    const descriptionIsValid = expenseData.description.trim().length > 0;\n\n    if (!amountIsValid || !dateIsValid || !descriptionIsValid) {\n      // Alert.alert('Invalid input', 'Please check your input values');\n      setInputs((curInputs) => {\n        return {\n          amount: { value: curInputs.amount.value, isValid: amountIsValid },\n          date: { value: curInputs.date.value, isValid: dateIsValid },\n          description: {\n            value: curInputs.description.value,\n            isValid: descriptionIsValid,\n          },\n        };\n      });\n      return;\n    }\n\n    onSubmit(expenseData);\n  }\n\n  const formIsInvalid =\n    !inputs.amount.isValid ||\n    !inputs.date.isValid ||\n    !inputs.description.isValid;\n\n  return (\n    <View style={styles.form}>\n      <Text style={styles.title}>Your Expense</Text>\n      <View style={styles.inputsRow}>\n        <Input\n          style={styles.rowInput}\n          label=\"Amount\"\n          invalid={!inputs.amount.isValid}\n          textInputConfig={{\n            keyboardType: 'decimal-pad',\n            onChangeText: inputChangedHandler.bind(this, 'amount'),\n            value: inputs.amount.value,\n          }}\n        />\n        <Input\n          style={styles.rowInput}\n          label=\"Date\"\n          invalid={!inputs.date.isValid}\n          textInputConfig={{\n            placeholder: 'YYYY-MM-DD',\n            maxLength: 10,\n            onChangeText: inputChangedHandler.bind(this, 'date'),\n            value: inputs.date.value,\n          }}\n        />\n      </View>\n      <Input\n        label=\"Description\"\n        invalid={!inputs.description.isValid}\n        textInputConfig={{\n          multiline: true,\n          // autoCapitalize: 'none'\n          // autoCorrect: false // default is true\n          onChangeText: inputChangedHandler.bind(this, 'description'),\n          value: inputs.description.value,\n        }}\n      />\n      {formIsInvalid && (\n        <Text style={styles.errorText}>\n          Invalid input values - please check your entered data!\n        </Text>\n      )}\n      <View style={styles.buttons}>\n        <Button style={styles.button} mode=\"flat\" onPress={onCancel}>\n          Cancel\n        </Button>\n        <Button style={styles.button} onPress={submitHandler}>\n          {submitButtonLabel}\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nexport default ExpenseForm;\n\nconst styles = StyleSheet.create({\n  form: {\n    marginTop: 40,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n    marginVertical: 24,\n    textAlign: 'center',\n  },\n  inputsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  rowInput: {\n    flex: 1,\n  },\n  errorText: {\n    textAlign: 'center',\n    color: GlobalStyles.colors.error500,\n    margin: 8,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  button: {\n    minWidth: 120,\n    marginHorizontal: 8,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}