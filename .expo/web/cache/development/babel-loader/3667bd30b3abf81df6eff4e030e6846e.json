{"ast":null,"code":"var showCurrentProgress = function showCurrentProgress() {\n  var numOfPages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  var fullLengthOfData = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (+numOfPages < 1) {\n    throw new Error('No Of Pages Should be equal or greater Than 1');\n  }\n\n  if (fullLengthOfData == 0) {\n    return null;\n  }\n\n  var noOfDataPerDisplay = fullLengthOfData / numOfPages;\n\n  if (Math.floor(noOfDataPerDisplay) < 1) {\n    console.log('as');\n    numOfPages = 1;\n    noOfDataPerDisplay = fullLengthOfData;\n  }\n\n  var endDisplayData = [];\n  var startDisplayData = [];\n  var floorData = Math.floor(noOfDataPerDisplay);\n  var ceilData = Math.ceil(noOfDataPerDisplay);\n\n  if (floorData !== ceilData || floorData === ceilData) {\n    var number = 0;\n\n    for (var i = 0; i < numOfPages; i++) {\n      var isCeilWasAdded = false;\n\n      if (numOfPages - 1 != i) {\n        number += floorData;\n        endDisplayData.push({\n          id: i,\n          endData: number\n        });\n      } else {\n        endDisplayData.push({\n          id: i,\n          endData: number + floorData + fullLengthOfData % numOfPages\n        });\n        number += ceilData;\n        isCeilWasAdded = true;\n      }\n\n      if (!isCeilWasAdded) {\n        startDisplayData.push({\n          id: i,\n          startData: number - floorData + 1\n        });\n      } else if (isCeilWasAdded) {\n        startDisplayData.push({\n          id: i,\n          startData: number - ceilData + 1\n        });\n      }\n    }\n  }\n\n  return {\n    end: endDisplayData,\n    start: startDisplayData\n  };\n};\n\nexport default showCurrentProgress;","map":{"version":3,"sources":["D:/react-native/xrevi/node_modules/react-native-datatable-component/functions/showCurrentProgress.js"],"names":["showCurrentProgress","numOfPages","fullLengthOfData","Error","noOfDataPerDisplay","Math","floor","console","log","endDisplayData","startDisplayData","floorData","ceilData","ceil","number","i","isCeilWasAdded","push","id","endData","startData","end","start"],"mappings":"AAAA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAsC;AAAA,MAArCC,UAAqC,uEAAxB,CAAwB;AAAA,MAArBC,gBAAqB;;AAC9D,MAAI,CAACD,UAAD,GAAc,CAAlB,EAAqB;AACjB,UAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,MAAID,gBAAgB,IAAI,CAAxB,EAA2B;AACvB,WAAO,IAAP;AACH;;AAED,MAAIE,kBAAkB,GAAGF,gBAAgB,GAAGD,UAA5C;;AAEA,MAAII,IAAI,CAACC,KAAL,CAAWF,kBAAX,IAAiC,CAArC,EAAwC;AACpCG,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAP,IAAAA,UAAU,GAAG,CAAb;AACAG,IAAAA,kBAAkB,GAAGF,gBAArB;AACH;;AAED,MAAMO,cAAc,GAAG,EAAvB;AACA,MAAMC,gBAAgB,GAAG,EAAzB;AACA,MAAMC,SAAS,GAAGN,IAAI,CAACC,KAAL,CAAWF,kBAAX,CAAlB;AACA,MAAMQ,QAAQ,GAAGP,IAAI,CAACQ,IAAL,CAAUT,kBAAV,CAAjB;;AACA,MAAIO,SAAS,KAAKC,QAAd,IAA0BD,SAAS,KAAKC,QAA5C,EAAsD;AAClD,QAAIE,MAAM,GAAG,CAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,UAApB,EAAgCc,CAAC,EAAjC,EAAqC;AACjC,UAAIC,cAAc,GAAG,KAArB;;AACA,UAAKf,UAAU,GAAG,CAAd,IAAoBc,CAAxB,EAA2B;AACvBD,QAAAA,MAAM,IAAIH,SAAV;AACAF,QAAAA,cAAc,CAACQ,IAAf,CAAoB;AAAEC,UAAAA,EAAE,EAAEH,CAAN;AAASI,UAAAA,OAAO,EAAEL;AAAlB,SAApB;AACH,OAHD,MAGO;AACHL,QAAAA,cAAc,CAACQ,IAAf,CAAoB;AAAEC,UAAAA,EAAE,EAAEH,CAAN;AAASI,UAAAA,OAAO,EAAEL,MAAM,GAAGH,SAAT,GAAsBT,gBAAgB,GAAGD;AAA3D,SAApB;AACAa,QAAAA,MAAM,IAAIF,QAAV;AACAI,QAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,UAAI,CAACA,cAAL,EAAqB;AACjBN,QAAAA,gBAAgB,CAACO,IAAjB,CAAsB;AAAEC,UAAAA,EAAE,EAAEH,CAAN;AAASK,UAAAA,SAAS,EAAGN,MAAM,GAAGH,SAAV,GAAuB;AAA3C,SAAtB;AACH,OAFD,MAEO,IAAIK,cAAJ,EAAoB;AACvBN,QAAAA,gBAAgB,CAACO,IAAjB,CAAsB;AAAEC,UAAAA,EAAE,EAAEH,CAAN;AAASK,UAAAA,SAAS,EAAGN,MAAM,GAAGF,QAAV,GAAsB;AAA1C,SAAtB;AACH;AACJ;AAEJ;;AAMD,SAAO;AACHS,IAAAA,GAAG,EAAEZ,cADF;AAEHa,IAAAA,KAAK,EAAEZ;AAFJ,GAAP;AAIH,CAnDD;;AAqDA,eAAeV,mBAAf","sourcesContent":["const showCurrentProgress = (numOfPages = 2, fullLengthOfData) => { //default is 3\n    if (+numOfPages < 1) {\n        throw new Error('No Of Pages Should be equal or greater Than 1')\n    }\n\n    if (fullLengthOfData == 0) {\n        return null;\n    }\n    \n    let noOfDataPerDisplay = fullLengthOfData / numOfPages;\n\n    if (Math.floor(noOfDataPerDisplay) < 1) {//it's mean data length is smaller than no Of Pages;\n        console.log('as')\n        numOfPages = 1;\n        noOfDataPerDisplay = fullLengthOfData; //fullLengthOfData / 1\n    }\n\n    const endDisplayData = []; //[{id: number, endData: number}]\n    const startDisplayData = []; //[{id: number, startData: number}]\n    const floorData = Math.floor(noOfDataPerDisplay);\n    const ceilData = Math.ceil(noOfDataPerDisplay)\n    if (floorData !== ceilData || floorData === ceilData) { //It's mean data is not equally distributed Among numOfPages\n        let number = 0;\n        // console.log(\"floor\", floorData,\"ceil\", ceilData)\n        for (let i = 0; i < numOfPages; i++) {\n            let isCeilWasAdded = false;\n            if ((numOfPages - 1) != i) { //It's mean it's not the last Loop\n                number += floorData;\n                endDisplayData.push({ id: i, endData: number });\n            } else { //here it's the last loop\n                endDisplayData.push({ id: i, endData: number + floorData + (fullLengthOfData % numOfPages) });\n                number += ceilData;\n                isCeilWasAdded = true;\n            }\n            if (!isCeilWasAdded) { //all loops\n                startDisplayData.push({ id: i, startData: (number - floorData) + 1 })\n            } else if (isCeilWasAdded) { //last loop\n                startDisplayData.push({ id: i, startData: (number - ceilData) + 1 })\n            }\n        }\n\n    } \n    // else {\n    //     for (let i = 0; i < numOfPages; i++) {//Here It's mean data is equally distributed Among numOfPages\n    //         endDisplayData.push({ id: i, endData: ceilData });//Here ceilData = floorData\n    //     }\n    // }\n    return {\n        end: endDisplayData,\n        start: startDisplayData\n    }\n}\n\nexport default showCurrentProgress;\n"]},"metadata":{},"sourceType":"module"}