{"ast":null,"code":"import { useContext } from 'react';\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Configuracion() {\n  var expensesCtx = useContext(ExpensesContext);\n  var recentExpenses = expensesCtx.expenses.filter(function (expense) {\n    var today = new Date();\n    var date7DaysAgo = getDateMinusDays(today, 7);\n    return expense.date >= date7DaysAgo && expense.date <= today;\n  });\n  return _jsx(ExpensesOutput, {\n    expenses: recentExpenses,\n    expensesPeriod: \"Pr\\xF3ximos d\\xEDas\",\n    fallbackText: \"Sin vencimientos pr\\xF3ximos d\\xEDas\"\n  });\n}\n\nexport default Configuracion;","map":{"version":3,"sources":["D:/react-native/xrevi/screens/Configuracion.js"],"names":["useContext","ExpensesOutput","ExpensesContext","getDateMinusDays","Configuracion","expensesCtx","recentExpenses","expenses","filter","expense","today","Date","date7DaysAgo","date"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,cAAP;AACA,SAASC,eAAT;AACA,SAASC,gBAAT;;;AAEA,SAASC,aAAT,GAAyB;AACvB,MAAMC,WAAW,GAAGL,UAAU,CAACE,eAAD,CAA9B;AAEA,MAAMI,cAAc,GAAGD,WAAW,CAACE,QAAZ,CAAqBC,MAArB,CAA4B,UAACC,OAAD,EAAa;AAC9D,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,YAAY,GAAGT,gBAAgB,CAACO,KAAD,EAAQ,CAAR,CAArC;AAEA,WAAOD,OAAO,CAACI,IAAR,IAAgBD,YAAhB,IAAgCH,OAAO,CAACI,IAAR,IAAgBH,KAAvD;AACD,GALsB,CAAvB;AAOA,SACE,KAAC,cAAD;AACE,IAAA,QAAQ,EAAEJ,cADZ;AAEE,IAAA,cAAc,EAAC,qBAFjB;AAGE,IAAA,YAAY,EAAC;AAHf,IADF;AAOD;;AAED,eAAeF,aAAf","sourcesContent":["import { useContext } from 'react';\n\nimport ExpensesOutput from '../components/ExpensesOutput/ExpensesOutput';\nimport { ExpensesContext } from '../store/expenses-context';\nimport { getDateMinusDays } from '../util/date';\n\nfunction Configuracion() {\n  const expensesCtx = useContext(ExpensesContext);\n\n  const recentExpenses = expensesCtx.expenses.filter((expense) => {\n    const today = new Date();\n    const date7DaysAgo = getDateMinusDays(today, 7);\n\n    return expense.date >= date7DaysAgo && expense.date <= today;\n  });\n\n  return (\n    <ExpensesOutput\n      expenses={recentExpenses}\n      expensesPeriod=\"Próximos días\"\n      fallbackText=\"Sin vencimientos próximos días\"\n    />\n  );\n}\n\nexport default Configuracion;\n"]},"metadata":{},"sourceType":"module"}